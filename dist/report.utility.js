!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.ReportUtility=n():e.ReportUtility=n()}(window,function(){return function(e){var n={};function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(r,i,function(n){return e[n]}.bind(null,i));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="/dist",t(t.s=0)}([function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(1);Object.defineProperty(n,"init",{enumerable:!0,get:function(){return r.init}}),Object.defineProperty(n,"destroy",{enumerable:!0,get:function(){return r.destroy}}),Object.defineProperty(n,"config",{enumerable:!0,get:function(){return r.config}}),Object.defineProperty(n,"send",{enumerable:!0,get:function(){return r.send}})},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.destroy=n.send=n.config=n.init=void 0;var r=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),i=a(t(2)),o=a(t(4));!function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(n[t]=e[t]);n.default=e}(t(5));function a(e){return e&&e.__esModule?e:{default:e}}var s=new(function(){function e(){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this.events=[{el:".rp-container__actions .rp-container__button",evt:"click",cb:"onSend"},{el:".rp-container__author .rp-container__field",evt:"change",cb:"onChangeAuthor"},{el:".rp-container__message .rp-container__field",evt:"change",cb:"onChangeMessage"},{el:".rp-container__header",evt:"click",cb:"onToggle"}],this.state=i.default,this.onSend=this.onSend.bind(this),this.onChangeAuthor=this.onChangeAuthor.bind(this),this.onChangeMessage=this.onChangeMessage.bind(this),this.onToggle=this.onToggle.bind(this)}return r(e,[{key:"init",value:function(){if(this.el=document.querySelector(this.state.el),!this.el)throw TypeError("`el` must be specified through `config` method");return this.render(),this.bindEvents(),this}},{key:"destroy",value:function(){this.unbindEvents(),this.el.innerHTML=""}},{key:"config",value:function(e){this.state=Object.assign({},i.default,e)}},{key:"bindEvents",value:function(){var e=this;this.events.forEach(function(n){var t=n.el,r=n.evt,i=n.cb,o=e.el.querySelector(t);o&&o.addEventListener(r,e[i],!1)})}},{key:"unbindEvents",value:function(){var e=this;this.events.forEach(function(n){var t=n.el,r=n.evt,i=n.cb,o=e.el.querySelector(t);o&&o.removeEventListener(r,e[i],!1)})}},{key:"setState",value:function(e){this.state=Object.assign({},this.state,e),this.update()}},{key:"onToggle",value:function(){this.setState({minimized:!this.state.minimized})}},{key:"onChangeAuthor",value:function(e){this.setState({name:e.currentTarget.value})}},{key:"onChangeMessage",value:function(e){this.setState({message:e.currentTarget.value})}},{key:"onSend",value:function(){var e=this,n=this.state,t=n.name,r=n.message,i=n.url;i&&(this.setState({isSending:!0}),(0,o.default)(i,{name:t,message:r}).then(function(n){if(200!==n.status)throw new Error(n.statusText);e.setState({isSending:!1})}).catch(function(){e.setState({isError:!0,isSending:!1})}))}},{key:"update",value:function(){this.state.minimized?this.el.querySelector(".rp-container").classList.add("rp-container_minimized"):this.el.querySelector(".rp-container").classList.remove("rp-container_minimized"),this.el.querySelector(".rp-container__cover_loading").style.display=this.state.isSending?"block":"none",this.el.querySelector(".rp-container__cover_error").style.display=this.state.isError?"block":"none"}},{key:"render",value:function(){this.el.innerHTML="",this.el.insertAdjacentHTML("afterbegin",this.state.template),this.state.minimized&&this.el.querySelector(".rp-container").classList.add("minimized")}}]),e}()),c=s.init.bind(s),u=s.config.bind(s),l=s.destroy.bind(s);n.init=c,n.config=u,n.send=o.default,n.destroy=l},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r={url:"/report",minimized:!0,template:function(e){return e&&e.__esModule?e:{default:e}}(t(3)).default};n.default=r},function(e,n){e.exports='<div class=rp-container> <div class=rp-container__header> Напишите нам об ошибке! <div class=rp-container__dismiss></div> </div> <div class=rp-container__wrapper> <div class=rp-container__author> <input class=rp-container__field type=text placeholder="Ваше Имя"/> </div> <div class=rp-container__message> <textarea class=rp-container__field type=text placeholder="Оставьте сообщение"></textarea> </div> <div class=rp-container__actions> <button class=rp-container__button>Отправить</button> </div> <div class="rp-container__cover rp-container__cover_loading">Отправляем, ждите...</div> <div class="rp-container__cover rp-container__cover_error"> <div class=rp-container__field>Упс, что-то пошло не так...</div> <button class=rp-container__button>Отправить еще раз</button> </div> </div> </div>'},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.message,r=n.name;return fetch(e,{method:"POST",body:JSON.stringify({name:r,message:t})})}},function(e,n,t){var r=t(6);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};t(8)(r,i);r.locals&&(e.exports=r.locals)},function(e,n,t){(e.exports=t(7)(!1)).push([e.i,".rp-container * {\r\n    box-sizing: border-box;\r\n}\r\n\r\n.rp-container {\r\n    bottom: 0;\r\n    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, .14), 0 3px 1px -2px rgba(0, 0, 0, .2), 0 1px 5px 0 rgba(0, 0, 0, .12);\r\n    cursor: pointer;\r\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n    margin: 0;\r\n    min-width: 280px;\r\n    padding: 0;\r\n    position: absolute;\r\n    right: 20px;\r\n}\r\n\r\n.rp-container_minimized .rp-container__wrapper {\r\n    max-height: 0;\r\n    opacity: 1;\r\n}\r\n.rp-container_minimized .rp-container__dismiss {\r\n    display: none;\r\n}\r\n\r\n.rp-container__wrapper {\r\n    max-height: 500px;\r\n    opacity: 1;\r\n    overflow: hidden;\r\n    position: relative;\r\n    transition: all .2s ease-in-out;\r\n}\r\n\r\n.rp-container__cover {\r\n    background-color: rgb(245, 249, 251);\r\n    color: rgb(136, 145, 137);\r\n    display: none;\r\n    height: 100%;\r\n    left: 0;\r\n    padding: 20px;\r\n    position: absolute;\r\n    text-align: center;\r\n    top: 0;\r\n    width: 100%;\r\n}\r\n\r\n.rp-container__header {\r\n    background-color: rgb(0, 146, 235);\r\n    color: #fff;\r\n    padding: 15px 20px;\r\n}\r\n\r\n.rp-container__dismiss {\r\n    color: #fff;\r\n    cursor: pointer;\r\n    font-family: Arial, sans-serif;\r\n    font-size: 14px;\r\n    font-weight: lighter;\r\n    position: absolute;\r\n    right: 8px;\r\n    text-decoration: none;\r\n    top: 8px;\r\n}\r\n\r\n.rp-container__dismiss:after {\r\n    /* UTF-8 symbol */\r\n    content: '\\2716';\r\n}\r\n\r\n.rp-container__field {\r\n    border: none;\r\n    border-bottom: 1px solid transparent;\r\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\r\n    margin: 0;\r\n    padding: 20px;\r\n    width: 100%;\r\n}\r\n\r\n.rp-container__button:focus,\r\n.rp-container__field:focus {\r\n    outline: 0;\r\n}\r\n\r\n.rp-container__button {\r\n    background-color: rgba(0, 146, 235, 1);\r\n    border: none;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    letter-spacing: 1px;\r\n    padding: 12px 35px 10px;\r\n    text-transform: uppercase;\r\n    width: 100%;\r\n}\r\n\r\n.rp-container__message .rp-container__field {\r\n    background-color: rgba(245, 249, 251, 1);\r\n    min-height: 100px;\r\n    resize: none;\r\n}\r\n\r\n.rp-container__actions {\r\n    padding: 20px;\r\n}",""])},function(e,n){e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var i=function(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}(r),o=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[t].concat(o).concat([i]).join("\n")}return[t].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+t+"}":t}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var o=this[i][0];"number"==typeof o&&(r[o]=!0)}for(i=0;i<e.length;i++){var a=e[i];"number"==typeof a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),n.push(a))}},n}},function(e,n,t){var r={},i=function(e){var n;return function(){return void 0===n&&(n=e.apply(this,arguments)),n}}(function(){return window&&document&&document.all&&!window.atob}),o=function(e){var n={};return function(e,t){if("function"==typeof e)return e();if(void 0===n[e]){var r=function(e,n){return n?n.querySelector(e):document.querySelector(e)}.call(this,e,t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}}(),a=null,s=0,c=[],u=t(9);function l(e,n){for(var t=0;t<e.length;t++){var i=e[t],o=r[i.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](i.parts[a]);for(;a<i.parts.length;a++)o.parts.push(b(i.parts[a],n))}else{var s=[];for(a=0;a<i.parts.length;a++)s.push(b(i.parts[a],n));r[i.id]={id:i.id,refs:1,parts:s}}}}function f(e,n){for(var t=[],r={},i=0;i<e.length;i++){var o=e[i],a=n.base?o[0]+n.base:o[0],s={css:o[1],media:o[2],sourceMap:o[3]};r[a]?r[a].parts.push(s):t.push(r[a]={id:a,parts:[s]})}return t}function d(e,n){var t=o(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=c[c.length-1];if("top"===e.insertAt)r?r.nextSibling?t.insertBefore(n,r.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),c.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=o(e.insertAt.before,t);t.insertBefore(n,i)}}function p(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=c.indexOf(e);n>=0&&c.splice(n,1)}function h(e){var n=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return t.nc}();r&&(e.attrs.nonce=r)}return v(n,e.attrs),d(e,n),n}function v(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function b(e,n){var t,r,i,o;if(n.transform&&e.css){if(!(o=n.transform(e.css)))return function(){};e.css=o}if(n.singleton){var c=s++;t=a||(a=h(n)),r=m.bind(null,t,c,!1),i=m.bind(null,t,c,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(n,e.attrs),d(e,n),n}(n),r=function(e,n,t){var r=t.css,i=t.sourceMap,o=void 0===n.convertToAbsoluteUrls&&i;(n.convertToAbsoluteUrls||o)&&(r=u(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var a=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,t,n),i=function(){p(t),t.href&&URL.revokeObjectURL(t.href)}):(t=h(n),r=function(e,n){var t=n.css,r=n.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}.bind(null,t),i=function(){p(t)});return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else i()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=i()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=f(e,n);return l(t,n),function(e){for(var i=[],o=0;o<t.length;o++){var a=t[o];(s=r[a.id]).refs--,i.push(s)}e&&l(f(e,n),n);for(o=0;o<i.length;o++){var s;if(0===(s=i[o]).refs){for(var c=0;c<s.parts.length;c++)s.parts[c]();delete r[s.id]}}}};var g=function(){var e=[];return function(n,t){return e[n]=t,e.filter(Boolean).join("\n")}}();function m(e,n,t,r){var i=t?"":r.css;if(e.styleSheet)e.styleSheet.cssText=g(n,i);else{var o=document.createTextNode(i),a=e.childNodes;a[n]&&e.removeChild(a[n]),a.length?e.insertBefore(o,a[n]):e.appendChild(o)}}},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,r=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var i,o=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(i=0===o.indexOf("//")?o:0===o.indexOf("/")?t+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,